State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On program shift to state 11
-- On list(var_decl) shift to state 12
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . typ IDENT SEMI [ WHILE VAR TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
-- On VOID shift to state 2
-- On INT shift to state 3
-- On CLS shift to state 4
-- On BOOL shift to state 5
-- On typ shift to state 6
## Reductions:

State 2:
## Known stack suffix:
## VOID
## LR(1) items:
typ -> VOID . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> VOID

State 3:
## Known stack suffix:
## INT
## LR(1) items:
typ -> INT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> INT

State 4:
## Known stack suffix:
## CLS
## LR(1) items:
typ -> CLS . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> CLS

State 5:
## Known stack suffix:
## BOOL
## LR(1) items:
typ -> BOOL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> BOOL

State 6:
## Known stack suffix:
## VAR typ
## LR(1) items:
var_decl -> VAR typ . IDENT SEMI [ WHILE VAR TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR typ IDENT
## LR(1) items:
var_decl -> VAR typ IDENT . SEMI [ WHILE VAR TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
-- On SEMI shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAR typ IDENT SEMI
## LR(1) items:
var_decl -> VAR typ IDENT SEMI . [ WHILE VAR TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE VAR TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS
--   reduce production var_decl -> VAR typ IDENT SEMI

State 9:
## Known stack suffix:
## var_decl
## LR(1) items:
list(var_decl) -> var_decl . list(var_decl) [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 10
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS
--   reduce production list(var_decl) ->

State 10:
## Known stack suffix:
## var_decl list(var_decl)
## LR(1) items:
list(var_decl) -> var_decl list(var_decl) . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS MAIN LPAR IF IDENT FALSE END CLASS
--   reduce production list(var_decl) -> var_decl list(var_decl)

State 11:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 12:
## Known stack suffix:
## list(var_decl)
## LR(1) items:
program -> list(var_decl) . list(class_def) MAIN BEGIN list(instr) END EOF [ # ]
## Transitions:
-- On CLASS shift to state 13
-- On list(class_def) shift to state 133
-- On class_def shift to state 139
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 13:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On BEGIN shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## CLASS IDENT BEGIN
## LR(1) items:
class_def -> CLASS IDENT BEGIN . list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 16
-- On list(attr_decl) shift to state 20
-- On attr_decl shift to state 131
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 16:
## Known stack suffix:
## ATTR
## LR(1) items:
attr_decl -> ATTR . typ IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On VOID shift to state 2
-- On INT shift to state 3
-- On CLS shift to state 4
-- On BOOL shift to state 5
-- On typ shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## ATTR typ
## LR(1) items:
attr_decl -> ATTR typ . IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On IDENT shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## ATTR typ IDENT
## LR(1) items:
attr_decl -> ATTR typ IDENT . SEMI [ METHOD END ATTR ]
## Transitions:
-- On SEMI shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## ATTR typ IDENT SEMI
## LR(1) items:
attr_decl -> ATTR typ IDENT SEMI . [ METHOD END ATTR ]
## Transitions:
## Reductions:
-- On METHOD END ATTR
--   reduce production attr_decl -> ATTR typ IDENT SEMI

State 20:
## Known stack suffix:
## CLASS IDENT BEGIN list(attr_decl)
## LR(1) items:
class_def -> CLASS IDENT BEGIN list(attr_decl) . list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On METHOD shift to state 21
-- On method_def shift to state 127
-- On list(method_def) shift to state 129
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 21:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
method_def -> METHOD . typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On VOID shift to state 2
-- On INT shift to state 3
-- On CLS shift to state 4
-- On BOOL shift to state 5
-- On typ shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## METHOD typ
## LR(1) items:
method_def -> METHOD typ . IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
method_def -> METHOD typ . IDENT LPAR RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On IDENT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## METHOD typ IDENT
## LR(1) items:
method_def -> METHOD typ IDENT . LPAR param_def RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
method_def -> METHOD typ IDENT . LPAR RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On LPAR shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## METHOD typ IDENT LPAR
## LR(1) items:
method_def -> METHOD typ IDENT LPAR . param_def RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
method_def -> METHOD typ IDENT LPAR . RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On VOID shift to state 2
-- On RPAR shift to state 25
-- On INT shift to state 3
-- On CLS shift to state 4
-- On BOOL shift to state 5
-- On typ shift to state 117
-- On param_def shift to state 121
## Reductions:

State 25:
## Known stack suffix:
## METHOD typ IDENT LPAR RPAR
## LR(1) items:
method_def -> METHOD typ IDENT LPAR RPAR . BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## METHOD typ IDENT LPAR RPAR BEGIN
## LR(1) items:
method_def -> METHOD typ IDENT LPAR RPAR BEGIN . list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 27
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production list(var_decl) ->

State 27:
## Known stack suffix:
## METHOD typ IDENT LPAR RPAR BEGIN list(var_decl)
## LR(1) items:
method_def -> METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) . list(instr) END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 115
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 28:
## Known stack suffix:
## WHILE
## LR(1) items:
instr -> WHILE . LPAR expr RPAR BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instr -> WHILE LPAR . expr RPAR BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 79
## Reductions:

State 30:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> TRUE

State 31:
## Known stack suffix:
## THIS
## LR(1) items:
expr -> THIS . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> THIS

State 32:
## Known stack suffix:
## NUM
## LR(1) items:
expr -> NUM . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> NUM

State 33:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 78
## Reductions:

State 34:
## Known stack suffix:
## NEW
## LR(1) items:
expr -> NEW . IDENT LPAR args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> NEW . IDENT LPAR RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On IDENT shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expr -> NEW IDENT . LPAR args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> NEW IDENT . LPAR RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On LPAR shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## NEW IDENT LPAR
## LR(1) items:
expr -> NEW IDENT LPAR . args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> NEW IDENT LPAR . RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RPAR shift to state 37
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 46
-- On args shift to state 76
## Reductions:

State 37:
## Known stack suffix:
## NEW IDENT LPAR RPAR
## LR(1) items:
expr -> NEW IDENT LPAR RPAR . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> NEW IDENT LPAR RPAR

State 38:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 75
## Reductions:

State 39:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 73
## Reductions:

State 40:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT . DOT IDENT [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT . DOT IDENT LPAR args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT . DOT IDENT LPAR RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On DOT shift to state 41
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> IDENT

State 41:
## Known stack suffix:
## IDENT DOT
## LR(1) items:
expr -> IDENT DOT . IDENT [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT DOT . IDENT LPAR args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT DOT . IDENT LPAR RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On IDENT shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## IDENT DOT IDENT
## LR(1) items:
expr -> IDENT DOT IDENT . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT DOT IDENT . LPAR args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT DOT IDENT . LPAR RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On LPAR shift to state 43
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> IDENT DOT IDENT
** Conflict on LPAR

State 43:
## Known stack suffix:
## IDENT DOT IDENT LPAR
## LR(1) items:
expr -> IDENT DOT IDENT LPAR . args RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> IDENT DOT IDENT LPAR . RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RPAR shift to state 44
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 46
-- On args shift to state 71
## Reductions:

State 44:
## Known stack suffix:
## IDENT DOT IDENT LPAR RPAR
## LR(1) items:
expr -> IDENT DOT IDENT LPAR RPAR . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> IDENT DOT IDENT LPAR RPAR

State 45:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> FALSE

State 46:
## Known stack suffix:
## expr
## LR(1) items:
args -> expr . COMMA args [ RPAR ]
args -> expr . [ RPAR ]
expr -> expr . PLUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . LESS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . AND expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
expr -> expr . OR expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On COMMA shift to state 69
-- On AND shift to state 61
## Reductions:
-- On RPAR
--   reduce production args -> expr

State 47:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr TIMES expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> expr TIMES expr

State 49:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr PLUS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> expr PLUS expr

State 51:
## Known stack suffix:
## expr DIVIDES
## LR(1) items:
expr -> expr DIVIDES . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expr DIVIDES expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr DIVIDES expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> expr DIVIDES expr

State 53:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr OR expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> expr OR expr

State 55:
## Known stack suffix:
## expr MODULO
## LR(1) items:
expr -> expr MODULO . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expr MODULO expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr MODULO expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS MODULO LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> expr MODULO expr

State 57:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr MINUS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> expr MINUS expr

State 59:
## Known stack suffix:
## expr NEQUALS
## LR(1) items:
expr -> expr NEQUALS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expr NEQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr NEQUALS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA
--   reduce production expr -> expr NEQUALS expr

State 61:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr AND expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> expr AND expr

State 63:
## Known stack suffix:
## expr LESS_EQUALS
## LR(1) items:
expr -> expr LESS_EQUALS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## expr LESS_EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr LESS_EQUALS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA
--   reduce production expr -> expr LESS_EQUALS expr

State 65:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr LESS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA
--   reduce production expr -> expr LESS expr

State 67:
## Known stack suffix:
## expr EQUALS
## LR(1) items:
expr -> expr EQUALS . expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr EQUALS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA
--   reduce production expr -> expr EQUALS expr

State 69:
## Known stack suffix:
## expr COMMA
## LR(1) items:
args -> expr COMMA . args [ RPAR ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 46
-- On args shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr COMMA args
## LR(1) items:
args -> expr COMMA args . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production args -> expr COMMA args

State 71:
## Known stack suffix:
## IDENT DOT IDENT LPAR args
## LR(1) items:
expr -> IDENT DOT IDENT LPAR args . RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On RPAR shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## IDENT DOT IDENT LPAR args RPAR
## LR(1) items:
expr -> IDENT DOT IDENT LPAR args RPAR . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> IDENT DOT IDENT LPAR args RPAR

State 73:
## Known stack suffix:
## LPAR expr
## LR(1) items:
expr -> LPAR expr . RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . PLUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
## Transitions:
-- On TIMES shift to state 47
-- On RPAR shift to state 74
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 74:
## Known stack suffix:
## LPAR expr RPAR
## LR(1) items:
expr -> LPAR expr RPAR . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> LPAR expr RPAR

State 75:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> MINUS expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> MINUS expr

State 76:
## Known stack suffix:
## NEW IDENT LPAR args
## LR(1) items:
expr -> NEW IDENT LPAR args . RPAR [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On RPAR shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## NEW IDENT LPAR args RPAR
## LR(1) items:
expr -> NEW IDENT LPAR args RPAR . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND
--   reduce production expr -> NEW IDENT LPAR args RPAR

State 78:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
expr -> NOT expr . [ WHILE TRUE TIMES THIS SEMI RPAR RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES COMMA AND ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On DIVIDES shift to state 51
## Reductions:
-- On WHILE TRUE THIS SEMI RPAR RETURN PRINT OR NUM NOT NEW NEQUALS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END COMMA AND
--   reduce production expr -> NOT expr

State 79:
## Known stack suffix:
## WHILE LPAR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> WHILE LPAR expr . RPAR BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On RPAR shift to state 80
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 80:
## Known stack suffix:
## WHILE LPAR expr RPAR
## LR(1) items:
instr -> WHILE LPAR expr RPAR . BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## WHILE LPAR expr RPAR BEGIN
## LR(1) items:
instr -> WHILE LPAR expr RPAR BEGIN . list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 113
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 82:
## Known stack suffix:
## RETURN
## LR(1) items:
instr -> RETURN . expr SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> RETURN expr . SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On SEMI shift to state 84
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 84:
## Known stack suffix:
## RETURN expr SEMI
## LR(1) items:
instr -> RETURN expr SEMI . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> RETURN expr SEMI

State 85:
## Known stack suffix:
## PRINT
## LR(1) items:
instr -> PRINT . LPAR expr RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instr -> PRINT LPAR . expr RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## PRINT LPAR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> PRINT LPAR expr . RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On RPAR shift to state 88
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 88:
## Known stack suffix:
## PRINT LPAR expr RPAR
## LR(1) items:
instr -> PRINT LPAR expr RPAR . SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On SEMI shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## PRINT LPAR expr RPAR SEMI
## LR(1) items:
instr -> PRINT LPAR expr RPAR SEMI . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> PRINT LPAR expr RPAR SEMI

State 90:
## Known stack suffix:
## IF
## LR(1) items:
instr -> IF . LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instr -> IF LPAR . expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## IF LPAR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES RPAR PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> IF LPAR expr . RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On RPAR shift to state 93
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 93:
## Known stack suffix:
## IF LPAR expr RPAR
## LR(1) items:
instr -> IF LPAR expr RPAR . BEGIN list(instr) END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN . list(instr) END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 103
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 95:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT . DOT IDENT [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT . DOT IDENT LPAR args RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT . DOT IDENT LPAR RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> IDENT . SET expr SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
instr -> IDENT . DOT IDENT SET expr [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On SET shift to state 96
-- On DOT shift to state 99
## Reductions:
-- On TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND
--   reduce production expr -> IDENT

State 96:
## Known stack suffix:
## IDENT SET
## LR(1) items:
instr -> IDENT SET . expr SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## IDENT SET expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> IDENT SET expr . SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On SEMI shift to state 98
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 98:
## Known stack suffix:
## IDENT SET expr SEMI
## LR(1) items:
instr -> IDENT SET expr SEMI . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> IDENT SET expr SEMI

State 99:
## Known stack suffix:
## IDENT DOT
## LR(1) items:
expr -> IDENT DOT . IDENT [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT DOT . IDENT LPAR args RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT DOT . IDENT LPAR RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> IDENT DOT . IDENT SET expr [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On IDENT shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## IDENT DOT IDENT
## LR(1) items:
expr -> IDENT DOT IDENT . [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT DOT IDENT . LPAR args RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> IDENT DOT IDENT . LPAR RPAR [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> IDENT DOT IDENT . SET expr [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On SET shift to state 101
-- On LPAR shift to state 43
## Reductions:
-- On TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND
--   reduce production expr -> IDENT DOT IDENT

State 101:
## Known stack suffix:
## IDENT DOT IDENT SET
## LR(1) items:
instr -> IDENT DOT IDENT SET . expr [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IDENT shift to state 40
-- On FALSE shift to state 45
-- On expr shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## IDENT DOT IDENT SET expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . DIVIDES expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . EQUALS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . NEQUALS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . LESS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES THIS RETURN PRINT PLUS OR NUM NOT NEW NEQUALS MODULO MINUS LPAR LESS_EQUALS LESS IF IDENT FALSE EQUALS END DIVIDES AND ]
instr -> IDENT DOT IDENT SET expr . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW LPAR IF IDENT FALSE END
--   reduce production instr -> IDENT DOT IDENT SET expr

State 103:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr)
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) . END ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr) END
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) END . ELSE BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On ELSE shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr) END ELSE
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) END ELSE . BEGIN list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN . list(instr) END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 107
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 107:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr)
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) . END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END
## LR(1) items:
instr -> IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> IF LPAR expr RPAR BEGIN list(instr) END ELSE BEGIN list(instr) END

State 109:
## Known stack suffix:
## instr
## LR(1) items:
list(instr) -> instr . list(instr) [ END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 110
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 110:
## Known stack suffix:
## instr list(instr)
## LR(1) items:
list(instr) -> instr list(instr) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instr) -> instr list(instr)

State 111:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . DIVIDES expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MODULO expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . NEQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . LESS_EQUALS expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQUALS MODULO MINUS LESS_EQUALS LESS EQUALS DIVIDES AND ]
instr -> expr . SEMI [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On TIMES shift to state 47
-- On SEMI shift to state 112
-- On PLUS shift to state 49
-- On OR shift to state 53
-- On NEQUALS shift to state 59
-- On MODULO shift to state 55
-- On MINUS shift to state 57
-- On LESS_EQUALS shift to state 63
-- On LESS shift to state 65
-- On EQUALS shift to state 67
-- On DIVIDES shift to state 51
-- On AND shift to state 61
## Reductions:

State 112:
## Known stack suffix:
## expr SEMI
## LR(1) items:
instr -> expr SEMI . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> expr SEMI

State 113:
## Known stack suffix:
## WHILE LPAR expr RPAR BEGIN list(instr)
## LR(1) items:
instr -> WHILE LPAR expr RPAR BEGIN list(instr) . END [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## WHILE LPAR expr RPAR BEGIN list(instr) END
## LR(1) items:
instr -> WHILE LPAR expr RPAR BEGIN list(instr) END . [ WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production instr -> WHILE LPAR expr RPAR BEGIN list(instr) END

State 115:
## Known stack suffix:
## METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr)
## LR(1) items:
method_def -> METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr) . END [ METHOD END ]
## Transitions:
-- On END shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr) END
## LR(1) items:
method_def -> METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr) END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD typ IDENT LPAR RPAR BEGIN list(var_decl) list(instr) END

State 117:
## Known stack suffix:
## typ
## LR(1) items:
param_def -> typ . IDENT COMMA param_def [ RPAR ]
param_def -> typ . IDENT [ RPAR ]
## Transitions:
-- On IDENT shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## typ IDENT
## LR(1) items:
param_def -> typ IDENT . COMMA param_def [ RPAR ]
param_def -> typ IDENT . [ RPAR ]
## Transitions:
-- On COMMA shift to state 119
## Reductions:
-- On RPAR
--   reduce production param_def -> typ IDENT

State 119:
## Known stack suffix:
## typ IDENT COMMA
## LR(1) items:
param_def -> typ IDENT COMMA . param_def [ RPAR ]
## Transitions:
-- On VOID shift to state 2
-- On INT shift to state 3
-- On CLS shift to state 4
-- On BOOL shift to state 5
-- On typ shift to state 117
-- On param_def shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## typ IDENT COMMA param_def
## LR(1) items:
param_def -> typ IDENT COMMA param_def . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production param_def -> typ IDENT COMMA param_def

State 121:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def . RPAR BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On RPAR shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def RPAR
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def RPAR . BEGIN list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def RPAR BEGIN
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def RPAR BEGIN . list(var_decl) list(instr) END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 124
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NUM NOT NEW MINUS LPAR IF IDENT FALSE END
--   reduce production list(var_decl) ->

State 124:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl)
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) . list(instr) END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 125
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 125:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr)
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) . END [ METHOD END ]
## Transitions:
-- On END shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) END
## LR(1) items:
method_def -> METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD typ IDENT LPAR param_def RPAR BEGIN list(var_decl) list(instr) END

State 127:
## Known stack suffix:
## method_def
## LR(1) items:
list(method_def) -> method_def . list(method_def) [ END ]
## Transitions:
-- On METHOD shift to state 21
-- On method_def shift to state 127
-- On list(method_def) shift to state 128
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 128:
## Known stack suffix:
## method_def list(method_def)
## LR(1) items:
list(method_def) -> method_def list(method_def) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(method_def) -> method_def list(method_def)

State 129:
## Known stack suffix:
## CLASS IDENT BEGIN list(attr_decl) list(method_def)
## LR(1) items:
class_def -> CLASS IDENT BEGIN list(attr_decl) list(method_def) . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## CLASS IDENT BEGIN list(attr_decl) list(method_def) END
## LR(1) items:
class_def -> CLASS IDENT BEGIN list(attr_decl) list(method_def) END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT BEGIN list(attr_decl) list(method_def) END

State 131:
## Known stack suffix:
## attr_decl
## LR(1) items:
list(attr_decl) -> attr_decl . list(attr_decl) [ METHOD END ]
## Transitions:
-- On ATTR shift to state 16
-- On list(attr_decl) shift to state 132
-- On attr_decl shift to state 131
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 132:
## Known stack suffix:
## attr_decl list(attr_decl)
## LR(1) items:
list(attr_decl) -> attr_decl list(attr_decl) . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) -> attr_decl list(attr_decl)

State 133:
## Known stack suffix:
## list(var_decl) list(class_def)
## LR(1) items:
program -> list(var_decl) list(class_def) . MAIN BEGIN list(instr) END EOF [ # ]
## Transitions:
-- On MAIN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN . BEGIN list(instr) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN . list(instr) END EOF [ # ]
## Transitions:
-- On WHILE shift to state 28
-- On TRUE shift to state 30
-- On THIS shift to state 31
-- On RETURN shift to state 82
-- On PRINT shift to state 85
-- On NUM shift to state 32
-- On NOT shift to state 33
-- On NEW shift to state 34
-- On MINUS shift to state 38
-- On LPAR shift to state 39
-- On IF shift to state 90
-- On IDENT shift to state 95
-- On FALSE shift to state 45
-- On list(instr) shift to state 136
-- On instr shift to state 109
-- On expr shift to state 111
## Reductions:
-- On END
--   reduce production list(instr) ->

State 136:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instr)
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instr) . END EOF [ # ]
## Transitions:
-- On END shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instr) END
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instr) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instr) END EOF
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instr) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(var_decl) list(class_def) MAIN BEGIN list(instr) END EOF

State 139:
## Known stack suffix:
## class_def
## LR(1) items:
list(class_def) -> class_def . list(class_def) [ MAIN ]
## Transitions:
-- On CLASS shift to state 13
-- On list(class_def) shift to state 140
-- On class_def shift to state 139
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 140:
## Known stack suffix:
## class_def list(class_def)
## LR(1) items:
list(class_def) -> class_def list(class_def) . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production list(class_def) -> class_def list(class_def)

