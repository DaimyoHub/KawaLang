# 1 "lib/lexer.mll"
 

  open Lexing
  open Parser

  exception LexicalError of string

  let keyword_or_ident =
    let h = Hashtbl.create 17 in
      List.iter (fun (s, k) -> Hashtbl.add h s k)
        [
          "print",     PRINT;
          "main",      MAIN;
          "class",     CLASS;
          "var",       VAR;
          "attr",      ATTR;
          "int",       INT;
          "bool",      BOOL;
          "void",      VOID;
          "true",      TRUE;
          "false",     FALSE;
          "this",      THIS;
          "new",       NEW;
          "if",        IF;
          "else",      ELSE;
          "while",     WHILE;
          "return",    RETURN;
          "method",    METHOD;
        ];
      fun s ->
        try  Hashtbl.find h s
        with Not_found -> IDENT(s)
        

# 37 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\002\000\001\000\002\000\003\000\004\000\
    \237\255\239\255\240\255\005\000\243\255\244\255\245\255\246\255\
    \247\255\248\255\249\255\079\000\019\000\029\000\045\000\002\000\
    \193\000\255\255\252\255\002\000\253\255\235\255\236\255\233\255\
    \231\255\230\255\229\255\016\000\253\255\254\255\041\000\255\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\028\000\028\000\023\000\021\000\027\000\
    \255\255\255\255\255\255\014\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\005\000\004\000\013\000\017\000\001\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    ";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\025\000\023\000\028\000\024\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\011\000\023\000\000\000\000\000\008\000\004\000\033\000\
    \015\000\014\000\009\000\010\000\017\000\021\000\018\000\022\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\038\000\016\000\006\000\007\000\005\000\032\000\
    \031\000\030\000\029\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\026\000\
    \039\000\000\000\000\000\000\000\027\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\013\000\003\000\012\000\034\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\023\000\025\000\000\000\000\000\023\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\027\000\000\000\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\023\000\255\255\255\255\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\007\000\011\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\022\000\
    \038\000\255\255\255\255\255\255\022\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\024\000\024\000\255\255\255\255\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\027\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 49 "lib/lexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 197 "lib/lexer.ml"

  | 1 ->
# 50 "lib/lexer.mll"
                         ( token lexbuf )
# 202 "lib/lexer.ml"

  | 2 ->
# 53 "lib/lexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 207 "lib/lexer.ml"

  | 3 ->
# 54 "lib/lexer.mll"
                         ( comment lexbuf; token lexbuf )
# 212 "lib/lexer.ml"

  | 4 ->
let
# 56 "lib/lexer.mll"
              n
# 218 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 56 "lib/lexer.mll"
                         ( NUM(int_of_string n) )
# 222 "lib/lexer.ml"

  | 5 ->
let
# 57 "lib/lexer.mll"
             id
# 228 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 57 "lib/lexer.mll"
                         ( keyword_or_ident id )
# 232 "lib/lexer.ml"

  | 6 ->
# 59 "lib/lexer.mll"
                         ( DOT )
# 237 "lib/lexer.ml"

  | 7 ->
# 60 "lib/lexer.mll"
                         ( COMMA )
# 242 "lib/lexer.ml"

  | 8 ->
# 61 "lib/lexer.mll"
                         ( SEMI )
# 247 "lib/lexer.ml"

  | 9 ->
# 62 "lib/lexer.mll"
                         ( LPAR )
# 252 "lib/lexer.ml"

  | 10 ->
# 63 "lib/lexer.mll"
                         ( RPAR )
# 257 "lib/lexer.ml"

  | 11 ->
# 64 "lib/lexer.mll"
                         ( BEGIN )
# 262 "lib/lexer.ml"

  | 12 ->
# 65 "lib/lexer.mll"
                         ( END )
# 267 "lib/lexer.ml"

  | 13 ->
# 68 "lib/lexer.mll"
                         ( MINUS )
# 272 "lib/lexer.ml"

  | 14 ->
# 69 "lib/lexer.mll"
                         ( NOT )
# 277 "lib/lexer.ml"

  | 15 ->
# 70 "lib/lexer.mll"
                         ( PLUS )
# 282 "lib/lexer.ml"

  | 16 ->
# 71 "lib/lexer.mll"
                         ( TIMES )
# 287 "lib/lexer.ml"

  | 17 ->
# 72 "lib/lexer.mll"
                         ( DIVIDES )
# 292 "lib/lexer.ml"

  | 18 ->
# 73 "lib/lexer.mll"
                         ( MODULO )
# 297 "lib/lexer.ml"

  | 19 ->
# 74 "lib/lexer.mll"
                         ( EQUALS )
# 302 "lib/lexer.ml"

  | 20 ->
# 75 "lib/lexer.mll"
                         ( NOT_EQUALS )
# 307 "lib/lexer.ml"

  | 21 ->
# 76 "lib/lexer.mll"
                         ( LESS )
# 312 "lib/lexer.ml"

  | 22 ->
# 77 "lib/lexer.mll"
                         ( LESS_EQUALS )
# 317 "lib/lexer.ml"

  | 23 ->
# 78 "lib/lexer.mll"
                         ( GREATER )
# 322 "lib/lexer.ml"

  | 24 ->
# 79 "lib/lexer.mll"
                         ( GREATER_EQUALS )
# 327 "lib/lexer.ml"

  | 25 ->
# 80 "lib/lexer.mll"
                         ( AND )
# 332 "lib/lexer.ml"

  | 26 ->
# 81 "lib/lexer.mll"
                         ( OR )
# 337 "lib/lexer.ml"

  | 27 ->
# 83 "lib/lexer.mll"
                         ( SET )
# 342 "lib/lexer.ml"

  | 28 ->
# 86 "lib/lexer.mll"
                         ( failwith ("unknown character : " ^ lexeme lexbuf) )
# 347 "lib/lexer.ml"

  | 29 ->
# 88 "lib/lexer.mll"
                         ( EOF )
# 352 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 35
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 91 "lib/lexer.mll"
                         ( () )
# 364 "lib/lexer.ml"

  | 1 ->
# 92 "lib/lexer.mll"
                         ( comment lexbuf )
# 369 "lib/lexer.ml"

  | 2 ->
# 93 "lib/lexer.mll"
                         ( failwith "unterminated comment" )
# 374 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

